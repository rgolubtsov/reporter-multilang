#
# reporter-cli/sql-pdf/js/Makefile
# =============================================================================
# Reporter Multilang. Version 0.1
# =============================================================================
# A tool to generate human-readable reports based on data from various sources
# with the focus on its implementation using a series of programming languages.
# =============================================================================
# Written by Radislav (Radicchio) Golubtsov, 2016-2020
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# (See the LICENSE file at the top of the source tree.)
#

BIN_DIR      = bin
LIB_DIR      = lib
SRC_DIR      = src
DAT_DIR      = $(LIB_DIR)/data
BASE_PACKAGE = reporter-primary
BASE_MODULE  = $(BASE_PACKAGE).js
CLASSES      = $(SRC_DIR)/$(BASE_MODULE) $(SRC_DIR)/$(BASE_PACKAGE)
PRJ_PREFIX   = reporter-
PRJ_SUFFIX   = -pdf.js
SCRIPT1      = $(PRJ_PREFIX)mysql$(PRJ_SUFFIX)
SCRIPT2      = $(PRJ_PREFIX)postgres$(PRJ_SUFFIX)
SCRIPT3      = $(PRJ_PREFIX)sqlite$(PRJ_SUFFIX)
SQLITE_DBASE = reporter_multilang.xz

# Specify flags and other vars here.
NODE         = node
MKDIR        = mkdir
ECHO         = echo
ECHOFLAGS    = -e
SED          = sed
SEDFLAGS     = -i -e
SEDREGEX     = "s/^\ //g"
CHMOD        = chmod
CHMODFLAGS   = -v
CHMODMODE    = 755
CP           = cp
CPFLAGS      = -vR
UNXZ         = unxz
UNXZFLAGS    = -v
RMFLAGS      = -vR

# Startup scripts for MySQL, PostgreSQL, and SQLite implementations
# like here documents.
# MySQL:
define SCRIPT1_FULL
#!/usr/bin/env $(NODE)\n\
/* ============================================================================\n\
" "* reporter-cli/sql-pdf/js/$(BIN_DIR)/$(SCRIPT1)\n\
" "* ============================================================================\n\
" "* Reporter Multilang. Version 0.1\n\
" "* ============================================================================\n\
" "* Autogenerated by GNU Make.\n\
" "*/\n\
\n\
\"use strict\";\n\
\n\
var ReporterPrimary = require(\"../$(LIB_DIR)/$(BASE_MODULE)\");\n\
\n\
/*\n\
" "* The database switch.\n\
" "* It indicates that the chosen database is managed by MySQL.\n\
" "*/\n\
var _MY_CONNECT = \"mysql\";\n\
\n\
// Instantiating the main class.\n\
var reporter = new ReporterPrimary();\n\
\n\
// Starting up the app.\n\
var ret = reporter.startup([_MY_CONNECT]);\n\
\n\
process.exitCode = ret;\n\
\n\
// vim:set nu et ts=4 sw=4:
endef

# PostgreSQL:
define SCRIPT2_FULL
#!/usr/bin/env $(NODE)\n\
/* ============================================================================\n\
" "* reporter-cli/sql-pdf/js/$(BIN_DIR)/$(SCRIPT2)\n\
" "* ============================================================================\n\
" "* Reporter Multilang. Version 0.1\n\
" "* ============================================================================\n\
" "* Autogenerated by GNU Make.\n\
" "*/\n\
\n\
\"use strict\";\n\
\n\
var ReporterPrimary = require(\"../$(LIB_DIR)/$(BASE_MODULE)\");\n\
\n\
/*\n\
" "* The database switch.\n\
" "* It indicates that the chosen database is managed by PostgreSQL.\n\
" "*/\n\
var _PG_CONNECT = \"postgres\";\n\
\n\
// Instantiating the main class.\n\
var reporter = new ReporterPrimary();\n\
\n\
// Starting up the app.\n\
var ret = reporter.startup([_PG_CONNECT]);\n\
\n\
process.exitCode = ret;\n\
\n\
// vim:set nu et ts=4 sw=4:
endef

# SQLite:
define SCRIPT3_FULL
#!/usr/bin/env $(NODE)\n\
/* ============================================================================\n\
" "* reporter-cli/sql-pdf/js/$(BIN_DIR)/$(SCRIPT3)\n\
" "* ============================================================================\n\
" "* Reporter Multilang. Version 0.1\n\
" "* ============================================================================\n\
" "* Autogenerated by GNU Make.\n\
" "*/\n\
\n\
\"use strict\";\n\
\n\
var ReporterPrimary = require(\"../$(LIB_DIR)/$(BASE_MODULE)\");\n\
\n\
/*\n\
" "* The database switch.\n\
" "* It indicates that the chosen database is managed by SQLite.\n\
" "*/\n\
var _SL_CONNECT = \"sqlite\";\n\
\n\
// Instantiating the main class.\n\
var reporter = new ReporterPrimary();\n\
\n\
// Starting up the app.\n\
var ret = reporter.startup([_SL_CONNECT]);\n\
\n\
process.exitCode = ret;\n\
\n\
// vim:set nu et ts=4 sw=4:
endef

# Making the target.
$(BIN_DIR) $(LIB_DIR):
	if [ ! -d "$(BIN_DIR)" ]; then \
		$(MKDIR) $(BIN_DIR); \
		if [ ! -d "$(LIB_DIR)" ]; then \
			$(MKDIR) $(LIB_DIR); \
		fi; \
		if [ -d "$(LIB_DIR)" ]; then \
			$(MKDIR) $(DAT_DIR); \
		fi; \
		$(ECHO) $(ECHOFLAGS) "$(SCRIPT1_FULL)" > $(BIN_DIR)/$(SCRIPT1); \
		$(ECHO) $(ECHOFLAGS) "$(SCRIPT2_FULL)" > $(BIN_DIR)/$(SCRIPT2); \
		$(ECHO) $(ECHOFLAGS) "$(SCRIPT3_FULL)" > $(BIN_DIR)/$(SCRIPT3); \
		$(SED) $(SEDFLAGS) $(SEDREGEX) $(BIN_DIR)/*; \
		$(CHMOD) $(CHMODFLAGS) $(CHMODMODE) $(BIN_DIR)/*; \
		$(CP) $(CPFLAGS) $(CLASSES) $(LIB_DIR); \
		$(CP) $(CPFLAGS) ../../../data/$(SQLITE_DBASE) $(DAT_DIR); \
		$(UNXZ) $(UNXZFLAGS) $(DAT_DIR)/$(SQLITE_DBASE); \
	fi

.PHONY: all clean

all: $(BIN_DIR) $(LIB_DIR)

clean:
	$(RM) $(RMFLAGS) $(BIN_DIR) $(LIB_DIR)

# vim:set nu ts=4 sw=4:
