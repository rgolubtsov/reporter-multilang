#
# reporter-cli/sql-pdf/python/Makefile
# =============================================================================
# Reporter Multilang. Version 0.1
# =============================================================================
# A tool to generate human-readable reports based on data from various sources
# with the focus on its implementation using a series of programming languages.
# =============================================================================
# Written by Radislav (Radicchio) Golubtsov, 2016-2017
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# (See the LICENSE file at the top of the source tree.)
#

BIN_DIR      = bin
LIB_DIR      = lib
SRC_DIR      = src
DAT_DIR      = $(LIB_DIR)/data
PYCACHE_DIR  = __pycache__
BASE_PACKAGE = reporterprimary
BASE_MODULE  = reporter_primary
BASE_CLASS   = ReportLabPkg
CLASSES      = $(SRC_DIR)/$(BASE_MODULE).* $(SRC_DIR)/$(BASE_PACKAGE)
PRJ_PREFIX   = reporter-
PRJ_SUFFIX   = -pdf
SCRIPT1      = $(PRJ_PREFIX)mysql$(PRJ_SUFFIX)
SCRIPT2      = $(PRJ_PREFIX)postgres$(PRJ_SUFFIX)
SCRIPT3      = $(PRJ_PREFIX)sqlite$(PRJ_SUFFIX)
SQLITE_DBASE = reporter_multilang.xz

# Specify flags and other vars here.
PYTHON      = python3
PYTHONFLAGS = -m compileall

CD           = cd
GREP         = grep
EXIT         = exit
EXIT_FAILURE = 1
EXIT_SUCCESS = 0
MKDIR        = mkdir
ECHO         = echo
ECHOFLAGS    = -e
SED          = sed
SEDFLAGS     = -i -e
SEDREGEX     = "s/^\ //g"
CHMOD        = chmod
CHMODFLAGS   = -v
CHMODMODE    = 755
CP           = cp
CPFLAGS      = -vR
UNXZ         = unxz
UNXZFLAGS    = -v
RMFLAGS      = -vR

# Startup scripts for MySQL, PostgreSQL, and SQLite implementations
# like here documents.
# MySQL:
define SCRIPT1_FULL
#!/usr/bin/env $(PYTHON)\n\
# -*- coding: utf-8 -*-\n\
# =============================================================================\n\
# reporter-cli/sql-pdf/python/$(BIN_DIR)/$(SCRIPT1)\n\
# =============================================================================\n\
# Reporter Multilang. Version 0.1\n\
# =============================================================================\n\
# Autogenerated by GNU Make.\n\
\n\
import sys\n\
\n\
# Helper constants.\n\
_LIB   = \"lib\"\n\
_SLASH =   \"/\"\n\
_UPDIR =  \"..\"\n\
\n\
libdir = _LIB\n\
\n\
# Calculating the actual lib dir path.\n\
script_path = __file__.split(_SLASH)\n\
script_name = script_path.pop()\n\
bindir_name = script_path.pop()\n\
\n\
libdir = _SLASH.join(script_path) + _SLASH + _LIB\n\
\n\
if (libdir == (_SLASH + _LIB)):\n\
" "" "" "" "libdir = _UPDIR + libdir\n\
\n\
sys.path.append(libdir)\n\
\n\
from $(BASE_MODULE) import $(BASE_CLASS)\n\
\n\
# The database switch.\n\
# It indicates that the chosen database is managed by MySQL.\n\
_MY_CONNECT = \"mysql\"\n\
\n\
# The application entry point.\n\
if (__name__ == \"__main__\"):\n\
" "" "" "" "# Instantiating the main class.\n\
" "" "" "" "reporter = $(BASE_CLASS)()\n\
\n\
" "" "" "" "# Starting up the app.\n\
" "" "" "" "reporter.startup([_MY_CONNECT])\n\
\n\
# vim:set nu et ts=4 sw=4:
endef

# PostgreSQL:
define SCRIPT2_FULL
#!/usr/bin/env $(PYTHON)\n\
# -*- coding: utf-8 -*-\n\
# =============================================================================\n\
# reporter-cli/sql-pdf/python/$(BIN_DIR)/$(SCRIPT2)\n\
# =============================================================================\n\
# Reporter Multilang. Version 0.1\n\
# =============================================================================\n\
# Autogenerated by GNU Make.\n\
\n\
import sys\n\
\n\
# Helper constants.\n\
_LIB   = \"lib\"\n\
_SLASH =   \"/\"\n\
_UPDIR =  \"..\"\n\
\n\
libdir = _LIB\n\
\n\
# Calculating the actual lib dir path.\n\
script_path = __file__.split(_SLASH)\n\
script_name = script_path.pop()\n\
bindir_name = script_path.pop()\n\
\n\
libdir = _SLASH.join(script_path) + _SLASH + _LIB\n\
\n\
if (libdir == (_SLASH + _LIB)):\n\
" "" "" "" "libdir = _UPDIR + libdir\n\
\n\
sys.path.append(libdir)\n\
\n\
from $(BASE_MODULE) import $(BASE_CLASS)\n\
\n\
# The database switch.\n\
# It indicates that the chosen database is managed by PostgreSQL.\n\
_PG_CONNECT = \"postgres\"\n\
\n\
# The application entry point.\n\
if (__name__ == \"__main__\"):\n\
" "" "" "" "# Instantiating the main class.\n\
" "" "" "" "reporter = $(BASE_CLASS)()\n\
\n\
" "" "" "" "# Starting up the app.\n\
" "" "" "" "reporter.startup([_PG_CONNECT])\n\
\n\
# vim:set nu et ts=4 sw=4:
endef

# SQLite:
define SCRIPT3_FULL
#!/usr/bin/env $(PYTHON)\n\
# -*- coding: utf-8 -*-\n\
# =============================================================================\n\
# reporter-cli/sql-pdf/python/$(BIN_DIR)/$(SCRIPT3)\n\
# =============================================================================\n\
# Reporter Multilang. Version 0.1\n\
# =============================================================================\n\
# Autogenerated by GNU Make.\n\
\n\
import sys\n\
\n\
# Helper constants.\n\
_LIB   = \"lib\"\n\
_SLASH =   \"/\"\n\
_UPDIR =  \"..\"\n\
\n\
libdir = _LIB\n\
\n\
# Calculating the actual lib dir path.\n\
script_path = __file__.split(_SLASH)\n\
script_name = script_path.pop()\n\
bindir_name = script_path.pop()\n\
\n\
libdir = _SLASH.join(script_path) + _SLASH + _LIB\n\
\n\
if (libdir == (_SLASH + _LIB)):\n\
" "" "" "" "libdir = _UPDIR + libdir\n\
\n\
sys.path.append(libdir)\n\
\n\
from $(BASE_MODULE) import $(BASE_CLASS)\n\
\n\
# The database switch.\n\
# It indicates that the chosen database is managed by SQLite.\n\
_SL_CONNECT = \"sqlite\"\n\
\n\
# The application entry point.\n\
if (__name__ == \"__main__\"):\n\
" "" "" "" "# Instantiating the main class.\n\
" "" "" "" "reporter = $(BASE_CLASS)()\n\
\n\
" "" "" "" "# Starting up the app.\n\
" "" "" "" "reporter.startup([_SL_CONNECT])\n\
\n\
# vim:set nu et ts=4 sw=4:
endef

# Making the target.
$(BIN_DIR) $(LIB_DIR):
	$(CD) $(SRC_DIR); \
	if [ -n "$$($(PYTHON) $(PYTHONFLAGS) . 2>&1 | $(GREP) 'line')" ]; then \
		$(ECHO) "Error: Something gets wrong... Exiting..."; \
		$(EXIT) $(EXIT_FAILURE); \
	fi; \
	$(CD) -

	if [ ! -d "$(BIN_DIR)" ]; then \
		$(MKDIR) $(BIN_DIR); \
		if [ ! -d "$(LIB_DIR)" ]; then \
			$(MKDIR) $(LIB_DIR); \
		fi; \
		if [ -d "$(LIB_DIR)" ]; then \
			$(MKDIR) $(DAT_DIR); \
		fi; \
		$(ECHO) $(ECHOFLAGS) "$(SCRIPT1_FULL)" > $(BIN_DIR)/$(SCRIPT1); \
		$(ECHO) $(ECHOFLAGS) "$(SCRIPT2_FULL)" > $(BIN_DIR)/$(SCRIPT2); \
		$(ECHO) $(ECHOFLAGS) "$(SCRIPT3_FULL)" > $(BIN_DIR)/$(SCRIPT3); \
		$(SED) $(SEDFLAGS) $(SEDREGEX) $(BIN_DIR)/*; \
		$(CHMOD) $(CHMODFLAGS) $(CHMODMODE) $(BIN_DIR)/*; \
		$(CP) $(CPFLAGS) $(CLASSES) $(LIB_DIR); \
		if [ -d "$(SRC_DIR)/$(PYCACHE_DIR)" ]; then \
			$(ECHO) "===> Copying base package's \"$(PYCACHE_DIR)\" directory into \"$(LIB_DIR)\" directory:"; \
			$(CP) $(CPFLAGS) $(SRC_DIR)/$(PYCACHE_DIR) $(LIB_DIR); \
		fi; \
		$(CP) $(CPFLAGS) ../../../data/$(SQLITE_DBASE) $(DAT_DIR); \
		$(UNXZ) $(UNXZFLAGS) $(DAT_DIR)/$(SQLITE_DBASE); \
	fi

.PHONY: all clean

all: $(BIN_DIR) $(LIB_DIR)

clean:
	$(RM) $(RMFLAGS) $(BIN_DIR) $(LIB_DIR) \
	$(SRC_DIR)/*.pyc \
	$(SRC_DIR)/$(PYCACHE_DIR) \
	$(SRC_DIR)/$(BASE_PACKAGE)/*.pyc \
	$(SRC_DIR)/$(BASE_PACKAGE)/$(PYCACHE_DIR)

# vim:set nu ts=4 sw=4:
